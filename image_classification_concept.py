# -*- coding: utf-8 -*-
"""Image_Classification_concept.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ErhLJ5N3PvVQnYUr9b_Ye5LmaDEijR2R

# Machine Learning

##Pipeline
1. get data
2. extract feature
3. train model
4. test model
5. deploy model
"""

!pip install botnoi==0.2.1



import botnoi as bn

im = bn.cv.image('https://ichef.bbci.co.uk/news/800/cpsprodpb/51F3/production/_106997902_gettyimages-611696954.jpg')

im.getresnet50()

import pickle
imo = pickle.load(open('1.p','rb'))



im.getresnet50()

im.getmobilenet()

im.mobilenet

from botnoi import scrape as sc
from botnoi import cv
import os

imgList = sc.get_image_urls('แมวโกรธ',30)

imgList

# Commented out IPython magic to ensure Python compatibility.
import IPython
from google.colab import output
htmlimage = getthumbdisplay(imgList)
html = '''<style>
img {
  border: 1px solid #ddd; /* Gray border */
  border-radius: 4px;  /* Rounded border */
  padding: 5px; /* Some padding */
  width: 150px; /* Set a small width */
}

/* Add a hover effect (blue shadow) */
img:hover {
  box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5);
}
</style>
<body>

# %s

</body>'''%htmlimage
display(IPython.display.HTML(html))

def gethtmlimage(imgurl):
  htmlTag = '''
  <a target="_blank" href="%s">
    <img src="%s" alt="Forest">
  </a>
  '''%(imgurl,imgurl)
  return htmlTag

def getthumbdisplay(imgList):
  res = ''
  for img in imgList:
    res = res + gethtmlimage(img)
  return res

gethtmlimage('https://static.siamsport.co.th/news/2020/02/23/news202002230543139.jpg')

def extractimagefeat(query):
  #create folder
  foldername = 'images/'+query
  isdir = os.path.isdir(foldername) 
  #check if folder exist
  if not isdir:
    #create directory
    os.makedirs(foldername)
  #get images from google search
  imglist = sc.get_image_urls(query,30)
  i = 1
  for img in imglist[0:30]:
    #extract image features from each images and save to files
    try:
      print(i)
      #create image path
      savepath = foldername + '/' + str(i)+'.p'
      a = cv.image(img)
      a.getresnet50()
      #a.getmobilenet()
      #a.getmobilenet()
      a.save(savepath)
      i = i + 1
    except:
      pass
  return 'complete'

rm -rf images

clsList = ['แมวยิ้ม','แมวโกรธ']
for c in clsList:
  extractimagefeat(c)

extractimagefeat('ทุเรียน')

extractimagefeat('ขนุน')

extractimagefeat('หมา')

#command to clear or files
#rm -rf *

import pickle
filename = 'images/รถกระบะ/1.p'
imo = pickle.load(open(filename,'rb'))



import glob
import pandas as pd
import pickle
def createdataset():
  imgfolder = glob.glob('images/*')
  dataset = []
  for cls in imgfolder:
    clsset = pd.DataFrame()
    pList = glob.glob(cls+'/*')
    featvec = []
    for p in pList:
      dat = pickle.load(open(p,'rb'))
      featvec.append(dat.resnet50)
      #featvec.append(dat.mobilenet)

    clsset['feature'] = featvec
    cls = cls.split('/')[-1]
    clsset['label'] = cls
    dataset.append(clsset)
  return pd.concat(dataset,axis=0)

glob.glob('images/รถตู้/*')

dataset = createdataset()

dataset

"""## Train model"""

from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.svm import LinearSVC
def trainmodel(dataset,modfile=''):
  trainfeat, testfeat, trainlabel, testlabel = train_test_split(dataset['feature'], dataset['label'], test_size=0.20, random_state=0)
  clf = LinearSVC()
  mod = clf.fit(np.vstack(trainfeat.values),trainlabel.values)
  res = mod.predict(np.vstack(testfeat.values))
  if modfile!='':
    pickle.dump(mod,open(modfile,'wb'))
  acc = sum(res == testlabel)/len(res)
  return mod,acc

mod,acc = trainmodel(dataset,'mymod.mod')

acc

# output function
modFile = 'mymod.mod'
mod = pickle.load(open(modFile,'rb'))

def predicting(imgurl):
  a = cv.image(imgurl)
  feat = a.getresnet50()
  res = mod.predict([feat])
  return res

a=predicting('https://pbs.twimg.com/media/DnwiLohUcAADcIB.jpg')
# a=predictimg('https://f.ptcdn.info/810/034/000/1440553775-IMG5594-o.jpg')
a